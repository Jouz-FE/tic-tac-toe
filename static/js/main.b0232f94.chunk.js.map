{"version":3,"sources":["logo.svg","square.component.jsx","board.component.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Square","val","id","onHandleClick","type","className","onClick","Board","useState","squares","Array","fill","whoIsPlayer","state","setState","square","map","el","key","e","target","copySquare","alert","handleClick","winner","victoryCondition","i","length","first","second","third","getWinner","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iNAAAA,EAAOC,QAAU,IAA0B,kC,gKCY5BC,G,YAVA,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,IAAKC,EAAwB,EAAxBA,GAAIC,EAAoB,EAApBA,cACzB,OACE,oCACE,4BAAQD,GAAIA,EAAIE,KAAK,SAASC,UAAU,SAASC,QAASH,GACvDF,MC0EMM,EA5ED,WAAO,IAAD,EACQC,mBAAS,CACjCC,QAASC,MAAM,GAAGC,KAAK,MACvBC,YAAa,MAHG,mBACXC,EADW,KACJC,EADI,KAkDVL,EAAyBI,EAAzBJ,QAASG,EAAgBC,EAAhBD,YAEXG,EADY,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAClBC,KAAI,SAACC,GAAD,OAC3B,kBAAC,EAAD,CACEC,IAAKD,EACLf,GAAIe,EACJhB,IAAKQ,EAAQQ,GACbd,cAAe,SAACc,GAAD,OApDC,SAACE,GAAO,IAClBjB,EAAOiB,EAAEC,OAATlB,GACAO,EAAyBI,EAAzBJ,QAASG,EAAgBC,EAAhBD,YACXS,EAAU,YAAOZ,GACnBY,EAAWnB,GACboB,MAAM,UAAD,OACuB,MAAhBV,EAAsB,IAAM,IADnC,gCAKPS,EAAWnB,GAAMU,EACjBE,EAAS,CACPL,QAASY,EACTT,YAA6B,MAAhBA,EAAsB,IAAM,OAuClBW,CAAYN,SAGjCO,EAvCY,SAACf,GAWjB,IAVA,IAAMgB,EAAmB,CACvB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEAC,EAAI,EAAGA,EAAID,EAAiBE,OAAQD,IAAK,CAAC,IAAD,cACjBD,EAAiBC,GADA,GACzCE,EADyC,KAClCC,EADkC,KAC1BC,EAD0B,KAEhD,GACErB,EAAQmB,IACRnB,EAAQmB,KAAWnB,EAAQoB,IAC3BpB,EAAQoB,KAAYpB,EAAQqB,GAE5B,OAAOrB,EAAQmB,GAGnB,OAAO,KAkBMG,CAAUtB,GACzB,OACE,oCACE,yBAAKJ,UAAU,SACb,6BACc,MAAXmB,GAA6B,MAAXA,EAAlB,4BACwBA,GADxB,kBAEcZ,GAAe,KAEhC,yBAAKP,UAAU,cAAcU,IAE/B,4BAAQT,QA3BQ,WAClBQ,EAAS,CACPL,QAASC,MAAM,GAAGC,KAAK,MACvBC,YAAa,QAwBb,sBC/DSoB,MARf,WACE,OACE,yBAAK3B,UAAU,OACb,kBAAC,EAAD,QCKc4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD6H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b0232f94.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Fragment } from \"react\";\nimport \"./square.styles.css\";\nconst Square = ({ val, id, onHandleClick }) => {\n  return (\n    <>\n      <button id={id} type=\"button\" className=\"square\" onClick={onHandleClick}>\n        {val}\n      </button>\n    </>\n  );\n};\n\nexport default Square;\n","import React, { useState, Fragment } from \"react\";\nimport \"./board.styles.css\";\nimport Square from \"./square.component\";\n\nconst Board = () => {\n  const [state, setState] = useState({\n    squares: Array(9).fill(null),\n    whoIsPlayer: \"X\",\n  });\n  const handleClick = (e) => {\n    const { id } = e.target;\n    const { squares, whoIsPlayer } = state;\n    const copySquare = [...squares];\n    if (copySquare[id]) {\n      alert(\n        `Player ${whoIsPlayer === \"X\" ? \"Y\" : \"X\"} already taken this square`\n      );\n      return;\n    }\n    copySquare[id] = whoIsPlayer;\n    setState({\n      squares: copySquare,\n      whoIsPlayer: whoIsPlayer === \"X\" ? \"Y\" : \"X\",\n    });\n  };\n  const getWinner = (squares) => {\n    const victoryCondition = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n    for (let i = 0; i < victoryCondition.length; i++) {\n      const [first, second, third] = victoryCondition[i];\n      if (\n        squares[first] &&\n        squares[first] === squares[second] &&\n        squares[second] === squares[third]\n      ) {\n        return squares[first];\n      }\n    }\n    return null;\n  };\n  const handleReset = () => {\n    setState({\n      squares: Array(9).fill(null),\n      whoIsPlayer: \"X\",\n    });\n  };\n  const { squares, whoIsPlayer } = state;\n  const setSqrNum = [0, 1, 2, 3, 4, 5, 6, 7, 8];\n  const square = setSqrNum.map((el) => (\n    <Square\n      key={el}\n      id={el}\n      val={squares[el]}\n      onHandleClick={(el) => handleClick(el)}\n    />\n  ));\n  const winner = getWinner(squares);\n  return (\n    <>\n      <div className=\"board\">\n        <div>\n          {winner === \"X\" || winner === \"Y\"\n            ? `WINNER IS PLAYER: ${winner}`\n            : `Player: ${whoIsPlayer}`}{\" \"}\n        </div>\n        <div className=\"board__row\">{square}</div>\n      </div>\n      <button onClick={handleReset}>RESTART THE GAME</button>\n    </>\n  );\n};\n\nexport default Board;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Borad from './board.component'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Borad/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />,document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}